일반적으로 배열을 위해서 반복문을 사용하며

for(int i = 0; i < arr.length; i++){
	arr[i];
}

등을 자주 사용합니다. i는 1씩 증가하면서 반복문을 돌리는 것이 반복문의 기능입니다. 

여기에 사용하고 있는 i의 기능을 추상화해서 일반화한 것이 바로 Iterator입니다. 

그런데 왜 단순히 반복문을 돌리면 되지 왜? Iterator라는 것을 만드는 것일까요??

가장 큰 이유는 Iterator를 사용해서 구현과 분리해서 사용할 수 있어서 그렇답니다. 

while(it.hasNext()){
			Book book = (Book)it.next();
			System.out.println(book.getName());
		}

이 코드를 보면 BookShelf에서 구현된 코드는 전혀 사용되고 있지 않습니다. 한마디로 BookShelf의 구현에 의존되고 있자 않는 것이죠. 

만약에 BookShelf에 있는 배열이 배열이 아니라 Array나 Vector로 구현을 바꾼다고 해도 BookShelf만 바꾸어주면 될뿐 Iterator 부분과는 연관성이 없습니다. 

디자인 패턴은 클래스의 재이용화를 촉진합니다. 촉진한다는 것은 클래스를 부품처럼 사용할 수 있고 하나의 부품을 수정해도 다른 폼에 큰 영향 없이 적은 수정만으로 끝낼 수 있다는 것을 의미합니다. 

 		